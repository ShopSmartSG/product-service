name: Security Scan (DAST)

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan on Sundays

jobs:
  security_scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      # Step 1: Create Docker network
      - name: Create Docker Network
        run: docker network create zap-network

      # Step 2: Create enhanced mock keyfile with valid PKCS#8 format
      - name: Create Mock Keyfile
        run: |
          # Create the mock keyfile with a valid private key format
          mkdir -p /tmp
          echo '{
            "type": "service_account",
            "project_id": "mock-project",
            "private_key_id": "mock-key-id",
            "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC0GbNcmS6l2ebz\ntmCZ2HGpG/GQPBlc0EFJalIk03FGG5A/tIF57eabGOz/iPiIGzH4I3L/hMefLM5p\nHfHn20UMsWbMa9IHkjGH+27V+m2p5n90Vn84sCE7rwrDPqerAoWVnEod+jAXcMuv\n7PArMREjtTsmUB1d5eshX+v9/17RBWSomdmTj0FMe5A0ifLA4aiNlnxPf8oci9mr\nySeHgATV70cflNfeCi2oK/4zUjLv8MU1+bVs80XIJrTR7dkhMEGMjgMXM9956+Sp\nvt7Ssn/XOK5nbR4XOvFw7spKEeam/bzICDN9T3UcjOAIvFApa1/D8jM6PKFJ0TWW\nGCpEjnp1AgMBAAECggEAOgm0Nsl4cmLznaMuozVQf3YtVNVBORs1htKX8R0gej7E\nr/rb5K6JK38PVNPPf5D/+950nyoraDy4scBAJf8P0+TRY1v1nZH7mz4n/BXNRDyu\n4w9CxUJhG0ov1jZ5Ms9HvCxW6C0pVUx4n1NkHA8eXlr3WkPkCs/eg21VcA9c/09J\nPLNHcbtfaTWtzGMSKKNP+6VuN0DK9OfR1dDgGrPtmIfIaJCcX4N3TkZ4V4q21Fq3\nFPxo6djlhdwVklhfyIVePalrQfoWJhmGeV0oms1IVRoRBB0dMhRSVZjhgD0JUE2G\ne9mM9HnoJ22FzO4IAXmxBusIJV0N8Qvx/+z6DDwnOwKBgQD4nuj7bPPi4Q6nL+uJ\neZ+bSRAqg0ki6FsuogjEdDV8YjlNJ+hqnvGhxuFanVjfk+OfmNH75qPLm4v4mVQL\nTYoS8R3QU5SgSDWPY7zl/C3pCqs1L/fnNar0QoQu04PjjFQgXBmlOwSWe8Zyy0OB\nhXyNYQ7h/OKRH0owWfzwIV+wNwKBgQC5ciddpQSniRd6UVG0sh8apO2SdrPH5KU+\nZDYyY26aXKzne+mtbBfESmM+hc8pnL/THM6JMv1U180WuiTXlGvsRylflB6qoX6d\noMcnH9edF2wbjsR3kKzsjsL1rpX+VhcTqY0TtEdVq1GUKa+DJcg1cRygg/ms48s1\nmeQDlQHcswKBgQCohda47n5WcGUlUGcgtY9Ji/noRztg7Q05i93ThE3o9Q+QTBfP\nhdOV7CA+8t8WFcG6IbVcQVcPoWz8YrpEOxf3hPbHio/5IVkky990KT7Zc0Df+ZbZ\nY1hw31GICBmjOTChCqzbgii29Els8Hjep6PolTyoVGkjI4l/QtAf2Q9qewKBgQCk\ntR8BrW9U3g5cNZ28P/ggUhwv2f4TrKCXqan5VxcFQwrPDt+diEQTs34yKea1ruMx\nPoSylvcqRAGEDhBq6Qhx80JsAcK7CnTKy+IWfdGjVQpP753QFE+CS8odK9NM8mnM\nrOsAdT5meKMcVWntscEAtlYWuyEmzavPD7/U7qOYwQKBgQDNGKbNtgPabzsmOx4p\nJLq9GKIH1Zr6UjwMqMCjmhTsphUAKxYXT0I8LKeQJhXw8MKbLIx32HfkdzHu0n9u\nThlxEqoW2sqHh7Ga0d0g1fzPl7dJkyRgfbgZV/BI9AbuA+EXFIw+eRKLSSUwpYkN\nEvHyopwWAe9XneDV/TVfGAt6uQ==\n-----END PRIVATE KEY-----\n",
            "client_email": "mock@example.com",
            "client_id": "000000000000000000000",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/mock"
          }' > /tmp/mock-keyfile.json
          
          # Verify the file was created correctly
          ls -la /tmp/mock-keyfile.json
          cat /tmp/mock-keyfile.json

      # Step 3: Build the Docker image for the product-service
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: product-service:latest
          build-args: |
            SPRING_PROFILES_ACTIVE=zapscan

      # Step 4: Run the Docker container with volume mount for the mock keyfile
      - name: Run Docker Container
        run: |
          docker run -d --name product-service \
            --network zap-network \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=zapscan \
            -v /tmp/mock-keyfile.json:/tmp/mock-keyfile.json \
            product-service:latest
          
          # Print container logs for debugging
          sleep 10
          docker logs product-service

      # Step 5: Wait for the application to start and be available
      - name: Wait for Application to Start
        run: |
          echo "Waiting for the application to start..."
          for i in {1..30}; do
            echo "Attempt $i: Checking if application is up..."
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health | grep -q "200"; then
              echo "Application is up!"
              exit 0
            fi
            echo "Application not ready yet..."
            docker logs product-service
            sleep 10
          done
          echo "Application failed to start"
          docker logs product-service
          exit 1

      # Step 6: Run ZAP Full Scan in the same Docker network
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.11.0
        with:
          target: 'http://product-service:8080'
          token: ${{ secrets.GITHUB_TOKEN }}
          cmd_options: >
            -t http://product-service:8080
            -r zap_report.html
            -z "-config scanner.attackStrength=HIGH 
                -config scanner.alertThreshold=MEDIUM
                -config view.mode=attack
                -config api.disablekey=true
                -config rules.cookie.ignorelist=true
                -config scanner.level=ATTACK
                -config rules.ascanrules.refs.json=true
                -config rules.ascanrules.script.injection=true
                -config rules.ascanrules.server.side.injection=true
                -config rules.ascanrules.sql.injection=true
                -config rules.ascanrules.nosqli.injection=true
                -config rules.ascanrules.xxe.injection=true
                -config rules.ascanrules.path.traversal=true
                -config rules.ascanrules.remote.code.execution=true"

      # Step 7: Upload the ZAP report as an artifact
      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-report
          path: zap_report.html

      # Fail on critical findings
      - name: Check for High Severity Findings
        run: |
          # Look for High severity findings in ZAP report
          HIGH_COUNT=$(cat zap_report.html | grep -A1 "Risk Level.*Number of Alerts" | grep "High" -A1 | tail -n1 | tr -d ' \t\r\n')
          echo "High severity count: $HIGH_COUNT"
          if [ "$HIGH_COUNT" -gt "0" ]; then
            echo "Critical or High severity vulnerabilities found!"
            exit 1
          else
            echo "No Critical or High severity vulnerabilities found."
            exit 0
          fi